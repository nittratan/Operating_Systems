17.Write a C program to kill a process by specifying its name rather than its PID.


#include<stdio.h>
#include<string.h>
main()
{
 char cmd[50],cmd1[50],cmd2[50],log[50],pname[50],pid[50];
 FILE * fp;
 system("rm newpro");
 system("rm data");
 printf("enter ur login name\n");
 fgets(log,sizeof(log),stdin);
 strcpy(cmd,"ps -aux | grep ");
 strcat(cmd,log);
 system(cmd);
 printf("enter the name of the process u want to terminate\n");
 scanf("%s",pname);
 strcpy(cmd1,"ps -a | grep ");
 strcat(cmd1,pname);
 strcat(cmd1," > newpro");
 system(cmd1);
 system("cut -f2 -d' ' newpro > data");
 fp=fopen("data","r");
 fscanf(fp,"%s",pid);
 strcpy(cmd2,"kill ");
 strcat(cmd2,pid);
 system(cmd2);
 system(cmd);
 printf("the process %s is killed successfully",pname);
}
-------------
infinite loop

#include<stdio.h>
main()
{
 while(1)
 {
  printf("hello");
 }
}


18.Create a file with few lines, Write a C program to read the file and delete the spaces more than one in the file (use UNIX file API’s).

#include<stdio.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
int main(int argc, char * argv[])
{
 int fd1,fd2;
 char buf1[50],buf2[50];
 int i=0,j=0,n;
 fd1=open(argv[1],O_RDONLY);
 fd2=open(argv[2],O_CREAT|O_WRONLY,0754);
 read(fd1,buf1,sizeof(buf1));
 for(i=0;i<strlen(buf1);i++)
 {
  if(((buf1[i]==' ')&&(buf1[i+1]!=' '))||(((buf1[i]!=' '))))
  {
   buf2[j++]=buf1[i];
  }
  else
  {
   buf2[j++]=buf1[i];
   for(n=i+1;n<strlen(buf1);n++)
   {
    buf1[n]=buf1[n+1];
   }
  }
 }
 write(fd2,buf2,sizeof(buf2));
 close(fd1);
 close(fd2);
 return 0;
}

20.Write a C program which renames all .txt files as .text files.

#include<stdio.h>
#include<string.h>
int main()
{
FILE *fp;
int i;
char temp[50],cmd[20];
system("ls");
system("ls > list");
fp=fopen("list","r");
while(!feof(fp)){
fscanf(fp,"%s",temp);
i=0;
strcpy(cmd,"mv ");
while(temp[i]!='.'){
i++;
}
if(temp[i+1]=='t'&&temp[i+2]=='x'&&temp[i+3]=='t')
{
strcat(cmd,temp);
strcat(cmd," ");
temp[i+2]='e';temp[i+3]='x';temp[i+4]='t';temp[i+5]='\0';
strcat(cmd,temp);
//printf("%s\n",cmd);
system(cmd);
}
//printf(" %s \n",temp);
}
printf("after changing: ");
system("ls");
return 0;
}

21. Implement a C program that reports the number of file names in the current working directory that consist of exactly five characters.


#include<stdio.h>
#include<string.h>
int main()
{
FILE *fp;
int i;
char temp[50],cmd[20];
system("ls > list");
fp=fopen("list","r");
while(!feof(fp)){
fscanf(fp,"%s",temp);
if(strlen(temp)==5)
{
printf(" %s \n",temp);
}
}
return 0;
}

22. Write Programs to
a) Report the behavior of the OS to get the CPU type and model, kernel version.

#include<stdio.h>
int main()
{
 system("cat /proc/cpuinfo | grep model\\ name");
 system("cat /proc/version");
 return 0;
}
-----------------------------------------------------------------------------------------------------
b) Get the amount of memory configured into the computer, amount of memory currently available.

#include<stdio.h>
int main()
{
 system("cat /proc/meminfo | grep Mem");
 return 0;
}


24. Write a program to demonstrate the implementation of Inter Process Communication (IPC) "who | grep YourLoginName" using pipes.


#include<stdio.h>
#include<unistd.h>
int main()
{
 int pid;
 int fd[2];
 pipe(fd);
 pid=fork();
 if(pid==-1)
 { 
  perror("fork");
  exit(-1);
 }
 if(pid)
 {
  close(0);
  dup (fd[0]);
  close(fd[1]);
  execl("/usr/bin/wc","wc","-l",(char *) 0);
  close(fd[0]);
 }
 else
 {
  close(1);
  dup (fd[1]);
  close(fd[0]);
  execl("/usr/bin/who","who",(char *) 0);
  close(fd[1]);
 }
 return 0;
}


28.Implement FCFS, SJF, Priority and Round– Robin process scheduling algorithms.

FCFS:
-----
#include<stdio.h>
#include<string.h>
//GLOBAL VARIABLES - DECLARATION
int n,Bu[20],Twt,Ttt,A[10],Wt[10],w;
float Awt,Att;
char pname[20][20],c[20][20];
//FUNCTION DECLARATIONS
void Getdata();
void Gantt_chart();
void Calculate();
void fcfs();
//GETTING THE NUMBER OF PROCESSES AND TH
//     E BURST TIME AND ARRIVAL TIME FOR EACH P
//     ROCESS
void Getdata()


    {
    	int i;
    	printf("\n Enter the number of processes: ");
    	scanf("%d",&n);
    	for(i=1;i<=n;i++)


        	{
        		fflush(stdin);
        		printf("\n\n Enter the process name: ");
        		scanf("%s",&pname[i]);
        		printf("\n Enter The BurstTime for Process %s =	",pname[i]);
        		scanf("%d",&Bu[i]);
        		printf("\n Enter the Arrival Time for Process %s =	",pname[i]);
        		scanf("%d",&A[i]);
        	}
    }

    //DISPLAYING THE GANTT CHART
    void Gantt_chart()


        {
        	int i;
        	printf("\n\n\t\t\tGANTT CHART\n");
        	printf("\n-----------------------------------------------------------\n");
        	for(i=1;i<=n;i++)
        		printf("|\t%s\t",pname[i]);
        	printf("|\t\n");
        	printf("\n-----------------------------------------------------------\n");
        	printf("\n");
        	for(i=1;i<=n;i++)
        		printf("%d\t\t",Wt[i]);
        	printf("%d",Wt[n]+Bu[n]);
        	printf("\n-----------------------------------------------------------\n");
        	printf("\n");
    }

    //CALCULATING AVERAGE WAITING TIME AND A
    //     VERAGE TURN AROUND TIME
    void Calculate()


        {
        	int i;
        	//For the 1st process
        	Wt[1]=0;
        	for(i=2;i<=n;i++)


            	{
            		Wt[i]=Bu[i-1]+Wt[i-1];
            	}
            	for(i=1;i<=n;i++)


                	{
                		Twt=Twt+(Wt[i]-A[i]);
                		Ttt=Ttt+((Wt[i]+Bu[i])-A[i]);
                	}
                	Att=(float)Ttt/n;
                	Awt=(float)Twt/n;
                	printf("\n\n Average Turn around time=%3.2f ms ",Att); 
                	printf("\n\n AverageWaiting Time=%3.2f ms",Awt);
            }

            //FCFS Algorithm
            void fcfs()


                {
                	int i,j,temp, temp1;
                	Twt=0;
                	Ttt=0;
                	printf("\n\n FIRST COME FIRST SERVED ALGORITHM\n\n");
                	for(i=1;i<=n;i++)


                    	{
                    		for(j=i+1;j<=n;j++)


                        		{
                        			if(A[i]>A[j])


                            			{
                            				temp=Bu[i];
                            				temp1=A[i];
                            				Bu[i]=Bu[j];
                            				A[i]=A[j];
                            				Bu[j]=temp;
                            				A[j]=temp1;
                            				strcpy(c[i],pname[i]);
                            				strcpy(pname[i],pname[j]);
                            				strcpy(pname[j],c[i]);
                            			}
                            		}
                            	}
                            	Calculate();
                            	Gantt_chart();
                        }

                        int main()
                            {
                            	int ch;
                            
                            	Getdata();
                            	fcfs();
                       
return 0;
                        }



SJF:
----

#include<stdio.h>
main()


    {
    float avgwt,avgtt;
    char pname[10][10],c[10][10];
    int wt[10],tt[10],bt[10],at[10],t,q,i,n,sum=0,sbt=0,ttime,j,ss=0;
    printf("\n\n Enter the number of processes:");
    scanf("%d",&n);
    printf("\n\n Enter the NAME,BURSTTIME and ARRIVALTIME of the processes");
    for(i=0;i<n;i++)


        {
        printf("\n\n NAME :");
        scanf("%s",&pname[i]);
        printf("\n\nBURST TIME :");
        scanf("%d",&bt[i]);
        printf("\n\n ARRIVAL TIME :");
        scanf("%d",&at[i]);
    }

    for(i=0;i<n;i++)
    for(j=i+1;j<n;j++)


        {
        if(at[i]==at[j])
        if(bt[i]>bt[j])


            {
            t=at[i];
            at[i]=at[j];
            at[j]=t;
            q=bt[i];
            bt[i]=bt[j];
            bt[j]=q;
            strcpy(c[i],pname[i]);
            strcpy(pname[i],pname[j]);
            strcpy(pname[j],c[i]);
        }

        if(at[i]!=at[j])
        if(bt[i]>bt[j])


            {
            t=at[i];
            at[i]=at[j];
            at[j]=t;
            q=bt[i];
            bt[i]=bt[j];
            bt[j]=q;
            strcpy(c[i],pname[i]);
            strcpy(pname[i],pname[j]);
            strcpy(pname[j],c[i]);
        }

    }

    wt[0]=0;
    for(i=0;i<n;i++)


        {
        wt[i+1]=wt[i]+bt[i];
        sum=sum+(wt[i]-at[i]);
        sbt=sbt+(wt[i+1]-at[i]);
        tt[i]=wt[i]+bt[i];
        ss=ss+bt[i];
    }

    printf("\n\n GANTT CHART");
    printf("\n\n ------------------------------------------------------------------\n");
    for(i=0;i<n;i++)


        {
        printf("|\t%s\t",pname[i]);
        sbt=sbt+wt[i+1];
        tt[i]=wt[i]+bt[i];
        ss=ss+bt[i];
    }

    

    printf("\n--------------------------------------------------------------------\n");
    for(i=0;i<n;i++)


        {
        printf("%d\t\t",wt[i]);
    }

    printf("%d\n",ss);
    printf("\n--------------------------------------------------------------------\n");
    printf("\n\n Total WAITING TIME of the process=%d",sum);
    printf("\n\nTotal TURNAROUND TIME of the process=%d",sbt);
    avgwt=(float)sum/n;
    avgtt=(float)sbt/n;
    printf("\n\nAverage WAITING TIME of the process=%f",avgwt);
    printf("\n\nAverage TURNAROUND TIME of the process=%f",avgtt);
}



Priority:
---------

#include<stdio.h>
#include<string.h>
void main()
{
  char p[10][5],temp[5];
  int i,j,pt[10],wt[10],totwt=0,pr[10],temp1,n;
    float avgwt;
printf("enter no of processes:");
scanf("%d",&n);
  for(i=0;i<n;i++)
  {

  printf("enter process%d name:",i+1);

  scanf("%s",&p[i]);

  printf("enter process time:");

  scanf("%d",&pt[i]);

  printf("enter priority:");

  scanf("%d",&pr[i]);

  }

  for(i=0;i<n;i++)

  {

 for(j=i+1;j<n;j++)

  {

   if(pr[i]>pr[j])

   {

   temp1=pr[i];

  pr[i]=pr[j];

  pr[j]=temp1;

  temp1=pt[i];

  pt[i]=pt[j];

  pt[j]=temp1;

  strcpy(temp,p[i]);

  strcpy(p[i],p[j]);

  strcpy(p[j],temp);

  }

  }

  }

  wt[0]=0;

  for(i=1;i<n;i++)

  {

   wt[i]=wt[i-1]+pt[i-1];

   totwt=totwt+wt[i];

   }

   avgwt=(float) totwt/n;

   printf("p_name\t p_time\t priority\t w_time\n");

    for(i=0;i<n;i++)

    {

   printf(" %s\t %d\t %d\t %d\n" ,p[i],pt[i],pr[i],wt[i]);

   }

   printf("total waiting time=%d\n avg waiting time=%f",totwt,avgwt);

return 0;

   }

Round-Robin:
------------

#include<stdio.h>
struct proc
{ char n[30];
  int bt;
  int at;
  int wt;
  int tt;
  int cbt;
  int flag;
};
main()
{ struct proc g[10],temp;
  int num,i,st=0,j,k,mf,q=0,cur,ck,yy;
  float avwt,avtt,swt=0.0,stt=0.0;
  printf("Enter number of processes : ");
  scanf("%d",&num);
  printf("Enter time quantam : ");
  scanf("%d",&ck);
  for(i=0;i<num;i++)
    { 
      printf("Enter details for process %d\n",i+1);  
      printf("process name : ");
      scanf("%s",g[i].n);
      printf("Enter arrival time :");
      scanf("%d",&g[i].at);
 
      printf("Burst time : ");
      scanf("%d",&g[i].bt);
      g[i].cbt=g[i].bt;
       g[i].tt=0;
       g[i].wt=0;
       g[i].flag=-1;
   }


   for(i=0;i<num-1;i++)
    { for(j=i+1;j<num;j++)
       { if(g[i].at>g[j].at)
              { temp=g[i];
                g[i]=g[j];
                g[j]=temp;
              }
         }
     }
  
   st=g[0].at;
   g[0].flag=1;
   cur=0;

   for(i=1;i<num;i++)
    { if(g[i].at==st)
        g[i].flag=0;
    }


   
   
   while(1)
   { 
      st++;
      q++;
      g[cur].bt--;
      
     if(g[cur].bt==0)
       {   
          g[cur].flag=2;
          q=0;
       }              
      
           for(i=0;i<num;i++)
               { 
                 if(g[i].flag==0)
                    { g[i].wt++;
             
                    }
                 if(g[i].at==st)
                    { g[i].flag=0; 
                    }
                }
                
          
 
        if(q==ck && g[cur].flag!=2)
         { g[cur].flag=0;
             q=0;
          } 
                
       

        if(q==0)
           {  mf=0; 

             for(j=cur+1;j!=cur;j++)
               { 
                 if(j==num)
                   { j=0;
                   } 
                 if(g[j].flag==0)
                   { mf=1;
                     break;           
                   }        
                
               }
             if(mf==0)
              break;
             else
              { g[j].flag=1;
                cur=j;
              }
           }
         
      
        
      }

for(i=0;i<num;i++)
 { g[i].tt=g[i].wt+g[i].cbt;
 }
    
  
  printf("Name\tBurst Time\tWait time\tTurn time\n\n");
  for(i=0;i<num;i++)
   {printf("%s\t%d\t\t\t%d\t\t%d\t\n",g[i].n,g[i].cbt,g[i].wt,g[i].tt);
    swt=swt+g[i].wt;
    stt=stt+g[i].tt; 
   }
   avwt=swt/num;
   avtt=stt/num;
   printf("\n\nAverage waiting time : %f",avwt);
   printf("\n\nAverage turnaround time : %f\n",avtt);

}
 